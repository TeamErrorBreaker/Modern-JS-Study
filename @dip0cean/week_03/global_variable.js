// 14-1 변수의 생명주기
// 변수는 자신이 선언된 위치에서 생성되고 소멸한다. 전역 변수의 생명 주기는 애플리케이션의 생명 주기와 같다.
// 하지만 함수 내부에서 선언된 지역 변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸한다.
function foo() {
  var x = 10;
  console.log(`x = ${x}`);
  return x;
}

foo();
// foo() 함수 내부에 선언된 x 변수는 foo() 함수가 호출될 때 생성되어 종료되면 함께 사라지기 때문에 상위 스코프에서는 x 변수에 대해 알 수 없다.
// 즉, 지역 변수의 생명 주기는 함수의 생명 주기와 일치한다.
console.log(x);

// 하지만 어떠한 경우에서는 지역 변수가 함수의 생명 주기보다 오래 생존하는 경우도 있다.
// 변수의 생명 주기는 메모리 공간이 확보된 시점부터 메모리 공간이 해제되어 가용 메모리 풀에 반횐되는 시점까지이다.
// 즉, 누군가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 생태로 남아 있게 되며, 이는 스코프도 동일하다.

var y = "global";
function bar() {
  // 변수 호이스팅에 의해 지역 변수 y 가 먼저 메모리에 할당되어 undifined 라는 값을 가지게 된다.
  // 때문에 아래의 출력문은 전역 변수 y 가 아닌 지역 변수 y 를 참조하지만 아직 값이 할당되지 않아 최초 메모리 할당 시 반영된 undifined 를 출력한다.
  // 이처럼 호이스팅은 스코프를 단위로 동작한다.
  console.log(y);
  var y = "local";
}

bar();
console.log(`y is ${y}`);

// 14-2 전역 변수의 생명주기와 문제점
// 함수와 달리 전역 변수는 명시저인 호출 없이 실행된다. 즉, 특별한 진입점이 없고 코드가 로드되자마자 곧바로 해석되고 실행된다.
// var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되는데, 이는 전역 객체의 생명 주기와 일치한다는 것을 말한다.
// 1. 전역 변수의 문제점은 암묵적 결합(Implicit Coupling) 을 허용하는 것이다.
// 이처럼 전역 변수와 같이 스코프의 유효 범위가 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다. (변수의 값을 예측하기 어려워진다.)
// 2. 스코프 체인 상에서 종점에 존재
// 전역 변수는 검색 속도가 가장 느린데, 이는 전역 변수가 스코프 체인 상에서 종점에 존재하기 때문이다.
// 3. 네임스페이스 오염
// 자바스크립트는 파일이 분리되어 있다고 하더라도 하나의 전역 스코프를 공유하기 때문에
// 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에서 존재할 경우 예상치 못한 결과를 가져올 수 있다.

// 14-3 전역 변수 사용을 억제하는 방법
// 1. 즉시 실행 함수 사용
// 즉시 실행 함수로 모든 코드를 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.
(function () {
  var foo3 = 100;
  console.log(foo3);
})();
console.log(foo3); // foo3 변수는 즉시 실행 함수 실행 시에만 메모리에 할당되어 해당 함수가 종료되면 함께 메모리에서 해제되기 때문에 외부에서 사용 할 수 없다.
// 2. 네임 스페이스 사용
// 전역 변수로 네임 스페이스를 담당하는 객체를 생성하고 전역 변수처럼 사용하고픈 변수를 프로퍼티로 정의한다.
var NAME_SPACE = {};
NAME_SPACE.name = "이름";
NAME_SPACE.greeting = "안녕하세요.";
NAME_SPACE.setting = {
  index: 0,
  title: "설정 파일",
};
console.log(NAME_SPACE);
// 3. 모듈 패턴
// 캡슐화를 통해 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조 / 조작할 수 있는 동작을 하나의 메소드로 묶는 것을 말하는데, 이를 이용해 정보 은닉을 할 수 있도록 한다.
var Counter = (function () {
  // private 변수
  var num = 0;
  return {
    increase() {
      return ++num;
    },
    decrease() {
      return --num;
    },
  };
})();

console.log(Counter.num); // private 변수는 외부에 노출되지 않는다.
console.log(Counter.increase(), Counter.decrease()); // 1, 0 출력
