// 4-4. Variable Hoisting
// Javascript 엔진은 변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문 등)을 소스 코드에서 찾아 먼저 실행해 메모리에 적재한다.
console.log(score); // undifined
var score; // score 변수는 런타임 시점 이전에 environment record 에 먼저 수집된다. 그 다음 코드의 맨 윗줄부터 순차적으로 실행한다.

// 4-5. 값의 할당
// 변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행된다. (변수 호이스팅)
// 반면 값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다.
console.log(variable); // undifined
var variable; // 변수 선언 > 변수 호이스팅에 의해 가장 먼저 실행
variable = 10; // 값 할당 > 런타임 시점에 값을 할당
console.log(variable); // 10
var value = 10; // 변수 선언 + 값 할당 > 변수 선언이 호이스팅에 의해 가장 먼저 실행되어 메모리에 적재되고, 런타임 시점에 해당 변수에 값이 할당된다.

// 4-6. 값의 재할당
// 변수 호이스팅에 의해서 변수가 메모리에 먼저 적재될 때 undifined 라는 값이 할당되므로, 후에 런타임 시 지정한 값을 할당하는 것은 엄밀히 말하면 값 재할당에 해당한다.
// 재할당할 값을 위한 메모리 공간을 확보하고, 해당 메모리 공간에 재할당할 값을 저장한다.
// 이로써 아래 예시 변수는 undifined, 초기 할당값, 재할당값 총 3개의 메모리 공간을 사용하게 되며, 
// 최종적으로 재할당된 값을 제외한 나머지 값들은 가비지 컬렉터에 의해 수집되어 리소스를 반납한다.